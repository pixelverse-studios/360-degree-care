This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-23T20:20:49.808Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  app/
    about/
      page.tsx
    faq/
      page.tsx
    legal-disclaimer/
      page.tsx
    nondiscrimination/
      page.tsx
    privacy-policy/
      page.tsx
    services/
      page.tsx
    testimonials/
      page.tsx
    layout.tsx
    page.tsx
  components/
    about/
      HomeAboutSection.tsx
    contact/
      ContactForm.tsx
    faqs/
      FaqSection.tsx
    hero/
      HomeHero.tsx
    nav/
      Hamburger.tsx
      Header.tsx
    testimonials/
      HomeTestimonials.tsx
      TestimonialCards.tsx
    ui/
      accordion.tsx
      button.tsx
      card.tsx
      form.tsx
      input.tsx
      label.tsx
      navigation-menu.tsx
      textarea.tsx
    Footer.tsx
    InfoCards.tsx
    Logo.tsx
  lib/
    utils.ts
  styles/
    globals.css
    reset.css
  utils/
    faqs.ts
    home.ts
    routes.ts
.gitignore
.prettierrc
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: src/app/about/page.tsx
================
export default function AboutPage() {
    return <main>About Page</main>
}

================
File: src/app/faq/page.tsx
================
import FaqSection from '@/components/faqs/FaqSection'

import { HOSPICE_FAQS, HOME_FAQS } from '@/utils/faqs'

export default function FAQPage() {
    return (
        <main>
            <FaqSection header="Home Healthcare Questions" faqs={HOME_FAQS} />
            <FaqSection header="Hospice Care Questions" faqs={HOSPICE_FAQS} />
        </main>
    )
}

================
File: src/app/legal-disclaimer/page.tsx
================
export default function LegalDisclaimerPage() {
    return <main>LegalDisclaimer Page</main>
}

================
File: src/app/nondiscrimination/page.tsx
================
export default function NondiscriminationPage() {
    return <main>Nondiscrimination Page</main>
}

================
File: src/app/privacy-policy/page.tsx
================
export default function PrivacyPolicyPage() {
    return <main>PrivacyPolicy Page</main>
}

================
File: src/app/services/page.tsx
================
export default function ServicesPage() {
    return <main>Services Page</main>
}

================
File: src/app/testimonials/page.tsx
================
export default function TestimonialsPage() {
    return <main>Testimonials Page</main>
}

================
File: src/app/layout.tsx
================
import type { Metadata } from 'next'
// import localFont from "next/font/local";
import { Header } from '@/components/nav/Header'
import Footer from '@/components/Footer'
import '../styles/globals.css'

export const metadata: Metadata = {
    title: '360° Care',
    description: 'Created and maintained by PixelVerse Studios'
}

export default function RootLayout({
    children
}: Readonly<{
    children: React.ReactNode
}>) {
    return (
        <html lang="en">
            <body className={`antialiased`}>
                <Header />
                {children}
                <Footer />
            </body>
        </html>
    )
}

================
File: src/app/page.tsx
================
'use client'

import HomeHero from '@/components/hero/HomeHero'
import InfoCards from '@/components/InfoCards'
import HomeAboutSection from '@/components/about/HomeAboutSection'
import HomeTestimonials from '@/components/testimonials/HomeTestimonials'
import ContactForm from '@/components/contact/ContactForm'

import { HIGHLIGHT_CARDS, SERVICE_CARDS } from '@/utils/home'

export default function HomePage() {
    return (
        <main className="flex flex-col gap-4 py-4">
            <HomeHero />
            <InfoCards bgColor="bg-secondary" cards={HIGHLIGHT_CARDS} />
            <HomeAboutSection />
            <InfoCards
                bgColor="bg-white"
                cards={SERVICE_CARDS}
                header="Our Concierge Level Services"
            />
            <HomeTestimonials />
            <section className="py-8">
                <ContactForm />
            </section>
        </main>
    )
}

================
File: src/components/about/HomeAboutSection.tsx
================
import { FaCircleCheck } from 'react-icons/fa6'

export default function HomeAboutSection() {
    return (
        <section className="max-w-custom mx-auto grid grid-cols-1 md:grid-cols-2 gap-6 justify-between items-center p-6">
            <img
                className="rounded-2xl h-fit w-fit"
                src="https://placehold.co/1200x1200"
                alt="placeholder"
            />
            <div className="flex flex-col gap-6">
                <h1 className="text-primary font-bold text-3xl">
                    About 360° Care
                </h1>
                <p>
                    For over 10 years, we've been proudly based in Ridgewood,
                    NJ, offering compassionate and reliable care solutions to
                    families across New Jersey. From home care for the elderly,
                    to a variety of other tailored services, we are committed to
                    meeting the unique needs of every individual. Our focus on
                    quality assurance ensures that those we serve receive
                    personalized, attentive support. As a certified CHAP
                    organization and licensed by the State Attorney General, we
                    adhere to the strictest standards of care and
                    professionalism. Your loved ones deserve the best, and we're
                    here to deliver with dignity, trust, and exceptional
                    service.
                </p>
                <div className="flex justify-between gap-4">
                    <ul className="flex flex-col gap-4">
                        <li className="flex items-center gap-2 text-lg">
                            <FaCircleCheck className="text-primary" />
                            <span>10+ Years of Trusted Service</span>
                        </li>
                        <li className="flex items-center gap-2 text-lg">
                            <FaCircleCheck className="text-primary" />
                            <span>Certified CHAP Organization</span>
                        </li>
                        <li className="flex items-center gap-2 text-lg">
                            <FaCircleCheck className="text-primary" />
                            <span>Highest Standards of Quality Assurance</span>
                        </li>
                        <li className="flex items-center gap-2 text-lg">
                            <FaCircleCheck className="text-primary" />
                            <span>Licensed by the State Attorney General</span>
                        </li>
                    </ul>
                    <div className="rounded-full bg-yellow-600 text-white h-[6rem] w-[6rem] flex items-center justify-center">
                        CHAP
                    </div>
                </div>
            </div>
        </section>
    )
}

================
File: src/components/contact/ContactForm.tsx
================
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import { FaPhone, FaEnvelope, FaLocationDot } from 'react-icons/fa6'

import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage
} from '@/components/ui/form'

const formSchema = z.object({
    fullName: z.string().min(2, 'Full Name must be at least 2 characters'),
    email: z.string().email('Invalid email address'),
    phone: z.string().min(10, 'Phone number must be at least 10 digits'),
    description: z.string().min(5, 'Description must be at least 5 characters')
})

export default function ContactForm() {
    const form = useForm({
        resolver: zodResolver(formSchema),
        mode: 'onChange',
        defaultValues: {
            fullName: '',
            email: '',
            phone: '',
            description: ''
        }
    })

    function onSubmit(values: z.infer<typeof formSchema>) {
        console.log('Form submitted:', values)
    }

    return (
        <Card className="max-w-4xl m-auto shadow-md rounded-lg overflow-hidden border-none">
            <div className="grid grid-cols-1 md:grid-cols-2">
                <div className="bg-primary text-white p-6 flex flex-col space-y-4">
                    <h2 className="text-2xl font-bold">Get in Touch</h2>
                    <p>
                        We're here to answer your questions and discuss how we
                        can help you and your loved ones.
                    </p>
                    <div className="flex items-center space-x-2">
                        <FaPhone className="w-5 h-5" />
                        <span>(555) 123-4567</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <FaEnvelope className="w-5 h-5" />
                        <span>contact@360degreecare.com</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <FaLocationDot className="w-5 h-5" />
                        <span>27 Chestnut St, Ridgewood, NJ 07450</span>
                    </div>
                </div>

                <div className="p-6 bg-white-bright">
                    <Form {...form}>
                        <form
                            onSubmit={form.handleSubmit(onSubmit)}
                            className="space-y-4"
                        >
                            <FormField
                                control={form.control}
                                name="fullName"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Full Name</FormLabel>
                                        <FormControl>
                                            <Input
                                                placeholder="Enter your full name"
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormMessage className="text-red-500 text-sm mt-1" />
                                    </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="email"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Email</FormLabel>
                                        <FormControl>
                                            <Input
                                                type="email"
                                                placeholder="Enter your email"
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormMessage className="text-red-500 text-sm mt-1" />
                                    </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="phone"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Phone Number</FormLabel>
                                        <FormControl>
                                            <Input
                                                type="tel"
                                                placeholder="Enter your phone number"
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormMessage className="text-red-500 text-sm mt-1" />
                                    </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="description"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>
                                            Description of Requested Service
                                        </FormLabel>
                                        <FormControl>
                                            <Textarea
                                                placeholder="Describe your request"
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormMessage className="text-red-500 text-sm mt-1" />
                                    </FormItem>
                                )}
                            />
                            <Button
                                type="submit"
                                variant="cta"
                                className="w-full rounded-md"
                            >
                                Send Message
                            </Button>
                        </form>
                    </Form>
                </div>
            </div>
        </Card>
    )
}

================
File: src/components/faqs/FaqSection.tsx
================
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger
} from '@/components/ui/accordion'

interface FaqItemProps {
    question: string
    answer: string
}

interface FaqSectionProps {
    header: string
    faqs: FaqItemProps[]
}

export default function FaqSection({ header, faqs }: FaqSectionProps) {
    return (
        <section>
            <h2>{header}</h2>
            <Accordion type="multiple" className="w-full">
                {faqs.map(faq => (
                    <AccordionItem value={faq.question} key={faq.question}>
                        <AccordionTrigger>{faq.question}</AccordionTrigger>
                        <AccordionContent>{faq.answer}</AccordionContent>
                    </AccordionItem>
                ))}
            </Accordion>
        </section>
    )
}

================
File: src/components/hero/HomeHero.tsx
================
import { useRouter } from 'next/navigation'
import { Button } from '../ui/button'
import { navLinks } from '@/utils/routes'

const [serviceLink] = navLinks

export default function HomeHero() {
    const router = useRouter()

    const onServicesClick = () => router.push(serviceLink.route)

    return (
        <section className="max-w-custom mx-auto grid grid-cols-1 md:grid-cols-2 gap-6 justify-between items-center p-6">
            <div className="flex flex-col gap-6">
                <h1 className="text-5xl font-bold text-black-muted">
                    The Finest Nurses and Home Aids in Bergen County
                </h1>
                <p className="text-lg">
                    Providing concierge level home care with compassion that
                    allows seniors to maintain their independence and dignity at
                    home.
                </p>
                <div className="my-5 flex gap-4">
                    <Button size="lg" variant="cta">
                        We're Ready to Help
                    </Button>
                    <Button
                        className="rounded-3xl"
                        size="lg"
                        onClick={onServicesClick}
                    >
                        Our Services
                    </Button>
                </div>
            </div>
            <img
                className="rounded-2xl h-fit w-fit"
                src="https://placehold.co/1200x1200"
                alt="placeholder"
            />
        </section>
    )
}

================
File: src/components/nav/Hamburger.tsx
================
interface HamburgerProps {
    isOpen: boolean
    setIsOpen: (isOpen: boolean) => void
}

export default function HamburgerMenu({ isOpen, setIsOpen }: HamburgerProps) {
    return (
        <button
            onClick={() => setIsOpen(!isOpen)}
            className="group relative w-10 h-10 flex flex-col items-center justify-center p-2 rounded-lg bg-primary-foreground text-white shadow-md border border-primary lg:hidden transition-colors duration-300 hover:bg-primary hover:text-background hover:border-background"
        >
            <span
                className={`absolute block w-6 h-0.5 bg-primary rounded transition-transform duration-300 group-hover:bg-background ${
                    isOpen ? 'rotate-45' : '-translate-y-2'
                }`}
            ></span>
            <span
                className={`absolute block w-6 h-0.5 bg-primary rounded transition-opacity duration-200 group-hover:bg-background ${
                    isOpen ? 'opacity-0' : ''
                }`}
            ></span>
            <span
                className={`absolute block w-6 h-0.5 bg-primary rounded transition-transform duration-300 group-hover:bg-background ${
                    isOpen ? '-rotate-45' : 'translate-y-2'
                }`}
            ></span>
        </button>
    )
}

================
File: src/components/nav/Header.tsx
================
'use client'

import { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import {
    NavigationMenu,
    NavigationMenuItem,
    NavigationMenuLink,
    NavigationMenuList
} from '@/components/ui/navigation-menu'
import { Button } from '../ui/button'
import { cn } from '@/lib/utils'
import { navLinks } from '@/utils/routes'
import HamburgerMenu from './Hamburger'
import Logo from '../Logo'

export function Header() {
    const pathname = usePathname()

    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState<boolean>(false)

    return (
        <header className="fixed top-0 left-0 right-0 w-full bg-primary-foreground z-50 border-b border-b-gray-300">
            <div className="max-w-[var(--max-width)] mx-auto px-6 py-4 flex items-center justify-between">
                <Link href="/">
                    <Logo invert={false} />
                </Link>

                {/* --- DESKTOP --- */}
                <nav className="hidden lg:block">
                    <NavigationMenu>
                        <NavigationMenuList className="space-x-6">
                            {navLinks.map(link => {
                                const isActive = pathname === link.route

                                return (
                                    <NavigationMenuItem key={link.label}>
                                        <Link
                                            href={link.route}
                                            legacyBehavior
                                            passHref
                                        >
                                            <NavigationMenuLink
                                                className={cn(
                                                    'nav-link',
                                                    isActive && 'active'
                                                )}
                                            >
                                                {link.label}
                                            </NavigationMenuLink>
                                        </Link>
                                    </NavigationMenuItem>
                                )
                            })}
                            <Button variant="cta">Call To Action</Button>
                        </NavigationMenuList>
                    </NavigationMenu>
                </nav>

                <HamburgerMenu
                    isOpen={isMobileMenuOpen}
                    setIsOpen={setIsMobileMenuOpen}
                />
                {/* --- MOBILE --- */}
                <div
                    className={cn(
                        'fixed inset-x-0 top-[65px] bg-[hsl(var(--nav))] border-b border-b-gray-300 lg:hidden',
                        'transition-[transform,opacity] duration-300 ease-in-out',
                        isMobileMenuOpen
                            ? 'translate-y-0 opacity-100 pointer-events-auto'
                            : '-translate-y-full opacity-0 pointer-events-none'
                    )}
                >
                    <nav className="max-w-[var(--max-width)] mx-auto px-6 py-4 bg-foreground">
                        <ul className="space-y-4">
                            {navLinks.map(link => {
                                const isActive = pathname === link.route

                                return (
                                    <li key={link.label}>
                                        <Link
                                            href={link.route}
                                            className={cn(
                                                'nav-link',
                                                isActive && 'active'
                                            )}
                                            onClick={() =>
                                                setIsMobileMenuOpen(false)
                                            }
                                        >
                                            {link.label}
                                        </Link>
                                    </li>
                                )
                            })}
                            <Button variant="cta">Call To Action</Button>
                        </ul>
                    </nav>
                </div>
            </div>
        </header>
    )
}

================
File: src/components/testimonials/HomeTestimonials.tsx
================
import TestimonialCards from './TestimonialCards'

const REVIEWS = [
    {
        name: 'Lubna Salehe',
        relation: 'Employee',
        description:
            "I am a care giver ..i work with this company. Excellent treatment and respect for the person's ability to work and they pay on time and keep in touch to make sure everything is going well. If u need a home care to ur parents or anyone from ur family no place better than a 360 Degree Care",
        createdAt: 'January 15 2025'
    },
    {
        name: 'Debbie Viar',
        relation: 'Daughter',
        description:
            '360 Degree Care staff worked hard to arrange for the exact care my father needed. As my father’s dementia evolved, his caregivers adapted accordingly. They were always patient, kind and attentive. The peace of mind they provided to our family cannot be measured.',
        createdAt: 'February 6 2022'
    },
    {
        name: 'Diane Lynch',
        relation: 'Wife',
        description:
            'I was very pleased with the care my husband recently received from 360 Degree Care. I called in the afternoon of a weekend day requesting someone to help care for my husband overnight while he was hospitalized. They were able to find a very kind and caring woman who was a companion to him until I arrived in the morning. I am very grateful for that.',
        createdAt: 'January 8 2024'
    }
]

export default function HomeTestimonials() {
    return (
        <section className="py-8 bg-secondary">
            <div className="max-w-custom mx-auto p-6">
                <div className="text-center text-black-muted mb-6">
                    <h2 className="font-bold text-2xl mb-3">
                        What Families Are Saying
                    </h2>
                    <p>
                        Read what families have to say about our care services
                        and dedicated team members
                    </p>
                </div>
                <TestimonialCards testimonials={REVIEWS} />
            </div>
        </section>
    )
}

================
File: src/components/testimonials/TestimonialCards.tsx
================
import { formatDistanceToNow } from 'date-fns'
import { FaStar } from 'react-icons/fa6'

interface TestimonialProps {
    name: string
    relation: string
    description: string
    createdAt: string
}

export default function TestimonialCards({
    testimonials
}: {
    testimonials: TestimonialProps[]
}) {
    return (
        <ul className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {testimonials.map(review => {
                const reviewDate = formatDistanceToNow(
                    new Date(review.createdAt),
                    { addSuffix: true }
                )
                return (
                    <li
                        key={review.name}
                        className="flex flex-col gap-4 bg-white-muted p-6 rounded-xl"
                    >
                        <div>
                            <h4 className="text-black font-bold text-lg">
                                {review.name}
                            </h4>
                            <span className="text-sm text-gray-400">
                                {review.relation}
                            </span>
                        </div>
                        <div className="flex gap-3 items-center">
                            <div className="flex gap-1 text-yellow-400">
                                <FaStar />
                                <FaStar />
                                <FaStar />
                                <FaStar />
                                <FaStar />
                            </div>
                            <span className="text-sm text-gray-400 italic">
                                {reviewDate}
                            </span>
                        </div>
                        <p>"{review.description}"</p>
                    </li>
                )
            })}
        </ul>
    )
}

================
File: src/components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: src/components/ui/button.tsx
================
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const buttonVariants = cva(
    'inline-flex items-center justify-center rounded-md text-md font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',
    {
        variants: {
            variant: {
                default:
                    'bg-white text-black shadow hover:bg-primary hover:text-white',
                destructive:
                    'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
                outline:
                    'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
                secondary:
                    'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
                ghost: 'button-ghost border border-[var(--ghost-bg)]',
                link: 'text-primary underline-offset-4 hover:underline',
                cta: 'px-6 py-3 border-2 font-bold transition-all duration-200 bg-primary text-secondary-foreground border-primary hover:bg-secondary-foreground hover:text-primary rounded-3xl'
            },
            size: {
                default: 'h-9 px-4 py-2',
                sm: 'h-8 px-3 text-xs',
                lg: 'h-10 px-8',
                icon: 'h-9 w-9'
            }
        },
        defaultVariants: {
            variant: 'default',
            size: 'default'
        }
    }
)

export interface ButtonProps
    extends React.ButtonHTMLAttributes<HTMLButtonElement>,
        VariantProps<typeof buttonVariants> {
    asChild?: boolean
    ghostBg?: string
    ghostText?: string
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    (
        {
            className,
            variant,
            size,
            asChild = false,
            ghostBg,
            ghostText,
            ...props
        },
        ref
    ) => {
        const Comp = asChild ? Slot : 'button'

        const dynamicStyles: React.CSSProperties =
            variant === 'ghost' && ghostBg && ghostText
                ? {
                      ['--ghost-bg' as any]: ghostBg,
                      ['--ghost-text' as any]: ghostText,
                      borderColor: ghostBg, // Border matches ghostBg
                      backgroundColor: 'transparent', // Default background transparent
                      color: ghostBg // Text starts as the border color
                  }
                : {}

        return (
            <Comp
                className={cn(buttonVariants({ variant, size, className }))}
                ref={ref}
                style={dynamicStyles}
                {...props}
            />
        )
    }
)
Button.displayName = 'Button'

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: src/components/Footer.tsx
================
'use client'

import Link from 'next/link'
import {
    FaFacebookF,
    FaYoutube,
    FaLinkedinIn,
    FaHeartPulse
} from 'react-icons/fa6'
import { Button } from '@/components/ui/button'
import Logo from '@/components/Logo'
import { navLinks, footerResources } from '@/utils/routes'

const [serviceLink, aboutLink, faqLink, testimonialLink] = navLinks

const linkHover = 'transition-all duration-200 textwhite hover:text-black'

export default function Footer() {
    const currentYear = new Date().getFullYear()
    return (
        <footer className="bg-primary border-t border-gray-300 py-10 text-black">
            <div className="max-w-[1400px] mx-auto px-6">
                {/* Top Section */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-white">
                    {/* Left - Logo & CTA */}
                    <div>
                        <div className="flex gap-2 items-center">
                            <FaHeartPulse className="h-6 w-6" />
                            <Logo invert />
                        </div>
                        <p className="mt-2 text-sm">
                            Providing compassionate in-home care services for
                            seniors
                        </p>
                        <div className="mt-4">
                            <Button className="w-full md:w-auto px-6 py-3 border-2 font-bold transition-all duration-200 bg-background text-primary border-background hover:border-white hover:bg-primary hover:text-white rounded-3xl">
                                Call To Action
                            </Button>
                        </div>
                    </div>

                    {/* Middle - Links */}
                    <div className="flex flex-col space-y-2 text-sm">
                        <p className="font-bold text-lg">Quick Links</p>
                        <Link
                            href={serviceLink.route}
                            className="hover:text-black"
                        >
                            {serviceLink.label}
                        </Link>
                        <Link
                            href={aboutLink.route}
                            className="hover:text-black"
                        >
                            {aboutLink.label}
                        </Link>
                        <p className="font-bold text-lg pt-3">Resources</p>
                        <Link href={faqLink.route} className="hover:text-black">
                            {faqLink.label}
                        </Link>
                        <Link
                            href={testimonialLink.route}
                            className="hover:text-black"
                        >
                            {testimonialLink.label}
                        </Link>
                    </div>

                    {/* Right - Contact & Socials */}
                    <div className="text-sm">
                        <p className="font-bold text-lg">Contact</p>
                        <p className="mt-2">
                            27 Chestnut Street <br />
                            Floor 1 <br />
                            Ridgewood, NJ 07450
                        </p>
                        <p className="mt-1">
                            <a
                                href="tel:8003387786"
                                className="text-primary hover:underline"
                            >
                                (800) 338-7786
                            </a>
                        </p>

                        {/* Social Icons */}
                        <div className="flex space-x-4 mt-4">
                            <a href="#" className={linkHover}>
                                <FaFacebookF size={24} />
                            </a>
                            <a href="#" className={linkHover}>
                                <FaLinkedinIn size={24} />
                            </a>
                            <a href="#" className={linkHover}>
                                <FaYoutube size={24} />
                            </a>
                        </div>
                    </div>
                </div>

                {/* Bottom Section */}
                <div className="mt-10 border-t border-gray-200 pt-4 text-center text-xs text-white">
                    <p>
                        360 Degree Care is an Equal Opportunity Employer. Each
                        franchise is independently owned and operated.
                    </p>
                    <p className="mt-1">
                        &copy; {currentYear} 360 Degree Care Inc. All rights
                        reserved.
                    </p>

                    {/* Legal Links */}
                    <div className="mt-2 flex flex-wrap justify-center space-x-3">
                        {footerResources.map((resource, key) => (
                            <>
                                <Link
                                    key={resource.label}
                                    href={resource.route}
                                    className="hover:underline"
                                >
                                    {resource.label}
                                </Link>
                                {key + 1 !== footerResources.length ? (
                                    <span key={key}>|</span>
                                ) : null}
                            </>
                        ))}
                    </div>
                </div>
            </div>
        </footer>
    )
}

================
File: src/components/InfoCards.tsx
================
import { IconType } from 'react-icons'

import { cn } from '@/lib/utils'

interface CardProps {
    icon: IconType
    title: string
    description: string
    bgColor: string
}

interface InfoCardProps {
    header?: string
    cards: CardProps[]
    bgColor: string
}

export default function InfoCards({ cards, header, bgColor }: InfoCardProps) {
    return (
        <section className={`${bgColor} py-8`}>
            {header != null ? (
                <h1 className="max-w-custom mx-auto p-6 flex gap-8 text-black text-3xl font-bold">
                    {header}
                </h1>
            ) : null}
            <ul className="max-w-custom mx-auto p-6 grid grid-cols-1 md:grid-cols-3 gap-8">
                {cards.map(card => {
                    const Icon = card.icon

                    return (
                        <li
                            className={cn(
                                'p-6 rounded-xl flex-1 flex flex-col gap-4 justify-between shadow-md',
                                card.bgColor
                            )}
                        >
                            <div className="rounded-full bg-primary h-[3rem] w-[3rem] flex items-center justify-center">
                                {<Icon className="text-2xl text-white" />}
                            </div>
                            <h2 className="font-bold text-black-muted text-xl">
                                {card.title}
                            </h2>
                            <p>{card.description}</p>
                        </li>
                    )
                })}
            </ul>
        </section>
    )
}

================
File: src/components/Logo.tsx
================
import { FaRegCircle } from 'react-icons/fa6'
import { cn } from '@/lib/utils'

interface LogoProps {
    invert: boolean
}

const Logo = ({ invert }: LogoProps) => {
    return (
        <div
            className={cn(
                'flex content-center gap-2 text-4xl font-bold cursor-pointer',
                invert ? 'text-background' : 'text-primary'
            )}
        >
            <p className="flex content-center">
                360
                <FaRegCircle className="h-2 w-2 my-[5px]" />
            </p>
            <p>CARE</p>
        </div>
    )
}

export default Logo

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/styles/globals.css
================
@import './reset.css';

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    --primary: 18, 100%, 59%; /* #ff6c2f */
    --secondary: 22, 60%, 76%; /* #e7b99e */
    --white: 0, 0%, 94.12%; /* #f0f0f0 */
    --muted-white: 0, 0%, 93.73%; /* #efefef */
    --bright-white: 0, 0%, 100%; /* #ffffff */
    --black: 0, 0%, 11%; /* #1c1c1c */
    --muted-black: 0, 0%, 20%; /* #333333 */

    --foreground: 0, 6%, 90%; /*#e6e3e3  */

    --ghost-bg: transparent;
    --ghost-text: black;

    --border-radius: 8px;
    --max-width: 1400px;
}

/* 
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
} */

html,
body {
    height: 100%;
    display: flex;
    flex-direction: column;
}

body {
    min-height: 100vh;
    color: hsl(var(--black));
    /* font-family: Arial, Helvetica, sans-serif; */
}

main {
    margin-top: 4.5rem;
    flex: 1;
}

.button-ghost {
    background-color: transparent !important;
    color: var(--ghost-bg) !important;
    border: 2px solid var(--ghost-bg) !important;
    transition: all 0.2s ease-in-out;
}

.button-ghost:hover {
    background-color: var(--ghost-bg) !important;
    color: var(--ghost-text) !important;
    border-color: var(--ghost-bg) !important;
}

@layer base {
    * {
        @apply border-border outline-ring/50;
    }
    body {
        @apply bg-primary-foreground text-black;
    }

    .nav-link {
        @apply text-[16px] text-primary font-bold transition-colors;
    }
    .nav-link:hover {
        @apply hovered-nav-link; /* => color: hsl(var(--secondary)); */
    }
    .nav-link.active {
        /* text color and border using your secondary color */
        @apply selected-nav-link border-b-2 border-secondary;
    }
}

@layer utilities {
    .text-balance {
        text-wrap: balance;
    }

    .selected-nav-link {
        color: hsl(var(--primary));
    }
    .hovered-nav-link {
        color: hsl(var(--primary));
    }
}

@layer components {
    .nav-link {
        @apply relative text-[16px] text-muted transition-colors;
    }

    .nav-link::after {
        content: '';
        position: absolute;
        left: 50%;
        bottom: -2px;
        width: 0;
        height: 2px;
        background-color: hsl(var(--secondary));
        transition:
            width 0.3s ease,
            left 0.3s ease;
    }

    .nav-link:hover::after,
    .nav-link.active::after {
        width: 100%;
        left: 0;
    }

    .nav-link.active {
        @apply font-bold text-secondary;
    }
}



@layer base {
  * {
    @apply border-border outline-ring/50;
    }
  body {
    @apply bg-background text-foreground;
    }
}

================
File: src/styles/reset.css
================
/* Box sizing rules */
*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
figure,
blockquote,
dl,
dd {
    margin: 0;
}

/* Remove list styles on ul, ol elements */
ul,
ol {
    list-style: none;
}

/* Set core root defaults */
html:focus-within {
    scroll-behavior: smooth;
}

/* Set core body defaults */
body {
    min-height: 100vh;
    text-rendering: optimizeSpeed;
    line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
    text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
    max-width: 100%;
    display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
    font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
    html:focus-within {
        scroll-behavior: auto;
    }

    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}

================
File: src/utils/faqs.ts
================
import { ReactNode } from "react";

export interface FAQ {
    question: string;
    answer: ReactNode;
  }

export const HOME_FAQS: FAQ[] = [
    {
        question: 'Who is providing care?',
        answer: 'There are paid healthcare professionals who are state-licensed and work per your doctor’s orders. These include nurses, physical therapists, and social workers. The second type includes aides, homemakers, and companions who help with daily activities so you or your loved one can stay at home independently for as long as possible.'
    },
    {
        question: 'What’s your employee screening process?',
        answer: '360 Degree Care professionals are carefully interviewed, screened, and background checked according to state laws prior to employment. In addition to providing training and supervision, we ensure a thoughtful match between our professionals and clients.'
    }
]

export const HOSPICE_FAQS: FAQ[] = [
    {
      question: "What is hospice care?",
      answer: (
        <>
          Hospice is a type and philosophy of care that focuses on the{" "}
          <a href="/palliative-care" className="text-blue-500 underline">
            palliative care
          </a>{" "}
          of a chronically ill, terminally ill, or seriously ill patient's pain and
          symptoms while attending to their emotional and spiritual needs. It is an
          integrated program of medical and psychosocial care, ensuring that the final
          stages of life are lived with the greatest degree of comfort and dignity.
        </>
      ),
    },
    {
      question: "Who pays for hospice care?",
      answer: (
        <>
          Both public and private insurance most often pay for part or all of hospice
          care, though plans vary. Read{" "}
          <a href="/how-to-pay" className="text-blue-500 underline">
            our How to Pay guide
          </a>{" "}
          for more information about coverage and payment options.
        </>
      ),
    },
  ];

================
File: src/utils/home.ts
================
import {
    FaClock,
    FaUserNurse,
    FaHouseChimneyMedical,
    FaHandHoldingHeart,
    FaHouseChimneyUser,
    FaKitMedical
} from 'react-icons/fa6'
import { IconType } from 'react-icons'

interface CardProps {
    icon: IconType
    title: string
    description: string
    bgColor: string
}

export const HIGHLIGHT_CARDS: CardProps[] = [
    {
        icon: FaClock,
        title: '24/7 Care Available',
        description:
            'Round-the-clock support and assistance whenever you need it, providing peace of mind.',
        bgColor: 'bg-white'
    },
    {
        icon: FaUserNurse,
        title: 'Certified Caregivers',
        description:
            'Our team consists of highly trained and certified healthcare professionals.',
        bgColor: 'bg-white'
    },
    {
        icon: FaHouseChimneyMedical,
        title: 'Personalized Care',
        description:
            'Customized care plans tailored to meet your loved ones’ needs and preferences.',
        bgColor: 'bg-white'
    }
]

export const SERVICE_CARDS: CardProps[] = [
    {
        icon: FaHandHoldingHeart,
        title: 'Home Health Care',
        description:
            '360 Degree Care provides professional home health care services including skilled nursing, therapy, and personal care. Tailored to support your recovery, enhance overall well0being, and maintain indepenence, all while receiving comfort and care you deserve in your own home.',
        bgColor: 'bg-[#fff]'
    },
    {
        icon: FaHouseChimneyUser,
        title: 'Live-In Care',
        description:
            '360 Degree Care provides exceptional live-in home care. Offering personalized, round-the-clock support to ensure your loved ones receive the comfort, safety, and companionship they deserve, all in the comfort of their own home.',
        bgColor: 'bg-[#fff]'
    },
    {
        icon: FaKitMedical,
        title: 'Medical Staffing',
        description:
            "Looking for dependable and skilled medical professionals to meet your staffing needs? 360 Degree Care specializes in connecting healthcare facilities with experienced, qualified staff, ensuring exceptional patient care and reliable support. Our commitment to excellence means you'll always have the right professionals in place when you need them most.",
        bgColor: 'bg-[#fff]'
    }
]

================
File: src/utils/routes.ts
================
export const navLinks = [
    {
        route: '/services',
        label: 'Services',
        subLinks: [] // ADD SERVICE SUB LINKS IN PHASE 3
    },
    {
        route: '/about',
        label: 'About Us',
        subLinks: []
    },
    {
        route: '/faq',
        label: 'FAQs',
        subLinks: []
    },
    {
        route: '/testimonials',
        label: 'Testimonials',
        subLinks: []
    }
]

export const footerResources = [
    {
        route: '/privacy-policy',
        label: 'Privacy Policy'
    },
    {
        route: '/legal-disclaimer',
        label: 'Legal Disclaimer'
    },
    {
        route: '/nondiscrimination',
        label: 'Nondiscrimination & Accessibility'
    }
]

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .prettierrc
================
{
    "tabWidth": 4,
    "semi": false,
    "singleQuote": true,
    "trailingComma": "none",
    "bracketSpacing": true,
    "arrowParens": "avoid",
    "requirePragma": false,
    "insertPragma": false,
    "proseWrap": "never"
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
    "name": "my-app",
    "version": "0.1.0",
    "private": true,
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    },
    "dependencies": {
        "@hookform/resolvers": "^4.1.1",
        "@radix-ui/react-accordion": "^1.2.3",
        "@radix-ui/react-checkbox": "^1.1.4",
        "@radix-ui/react-dialog": "^1.1.6",
        "@radix-ui/react-label": "^2.1.2",
        "@radix-ui/react-navigation-menu": "^1.2.5",
        "@radix-ui/react-select": "^2.1.6",
        "@radix-ui/react-slot": "^1.1.2",
        "class-variance-authority": "^0.7.1",
        "clsx": "^2.1.1",
        "date-fns": "^4.1.0",
        "lucide-react": "^0.475.0",
        "next": "14.2.23",
        "react": "^18",
        "react-dom": "^18",
        "react-hook-form": "^7.54.2",
        "react-icons": "^5.5.0",
        "tailwind-merge": "^3.0.1",
        "tailwindcss-animate": "^1.0.7",
        "zod": "^3.24.2"
    },
    "devDependencies": {
        "@types/node": "^20",
        "@types/react": "^18",
        "@types/react-dom": "^18",
        "autoprefixer": "^10.4.20",
        "eslint": "^8",
        "eslint-config-next": "14.2.23",
        "eslint-config-prettier": "^10.0.1",
        "eslint-plugin-import": "^2.31.0",
        "eslint-plugin-prettier": "^5.2.3",
        "eslint-plugin-react": "^7.37.4",
        "eslint-plugin-react-hooks": "^5.1.0",
        "postcss": "^8.5.2",
        "prettier": "^3.5.0",
        "tailwindcss": "^3.4.17",
        "typescript": "^5"
    }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from 'tailwindcss'

const config: Config = {
    darkMode: ['class'],
    content: [
        './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
        './src/components/**/*.{js,ts,jsx,tsx,mdx}',
        './src/app/**/*.{js,ts,jsx,tsx,mdx}'
    ],
    theme: {
    	extend: {
    		maxWidth: {
    			custom: 'var(--max-width)'
    		},
    		colors: {
    			background: 'hsl(var(--white))',
    			foreground: 'hsl(var(--foreground))',
    			primary: {
    				DEFAULT: 'hsl(var(--primary))',
    				foreground: 'hsl(var(--muted-white))'
    			},
    			card: {
    				DEFAULT: 'hsl(var(--card))',
    				foreground: 'hsl(var(--card-foreground))'
    			},
    			popover: {
    				DEFAULT: 'hsl(var(--popover))',
    				foreground: 'hsl(var(--popover-foreground))'
    			},
    			secondary: {
    				DEFAULT: 'hsl(var(--secondary))',
    				foreground: 'hsl(var(--white))'
    			},
    			muted: {
    				DEFAULT: 'hsl(var(--muted-black))',
    				foreground: 'hsl(var(--muted-foreground))'
    			},
    			accent: {
    				DEFAULT: 'hsl(var(--accent))',
    				foreground: 'hsl(var(--accent-foreground))'
    			},
    			destructive: {
    				DEFAULT: 'hsl(var(--destructive))',
    				foreground: 'hsl(var(--destructive-foreground))'
    			},
    			border: 'hsl(var(--border))',
    			input: 'hsl(var(--input))',
    			ring: 'hsl(var(--ring))',
    			chart: {
    				'1': 'hsl(var(--chart-1))',
    				'2': 'hsl(var(--chart-2))',
    				'3': 'hsl(var(--chart-3))',
    				'4': 'hsl(var(--chart-4))',
    				'5': 'hsl(var(--chart-5))'
    			},
    			black: {
    				DEFAULT: 'hsl(var(--black))',
    				muted: 'hsl(var(--black-muted))'
    			},
    			white: {
    				DEFAULT: 'hsl(var(--white))',
    				muted: 'hsl(var(--muted-white))',
    				bright: 'hsl(var(--bright-white))'
    			}
    		},
    		borderRadius: {
    			lg: 'var(--border-radius)',
    			md: 'calc(var(--border-radius) - 2px)',
    			sm: 'calc(var(--border-radius) - 4px)'
    		},
    		keyframes: {
    			'accordion-down': {
    				from: {
    					height: '0'
    				},
    				to: {
    					height: 'var(--radix-accordion-content-height)'
    				}
    			},
    			'accordion-up': {
    				from: {
    					height: 'var(--radix-accordion-content-height)'
    				},
    				to: {
    					height: '0'
    				}
    			}
    		},
    		animation: {
    			'accordion-down': 'accordion-down 0.2s ease-out',
    			'accordion-up': 'accordion-up 0.2s ease-out'
    		}
    	}
    },
    plugins: [require('tailwindcss-animate')]
}
export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
