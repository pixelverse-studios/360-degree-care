This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/components/ui/navigation-menu.tsx, src/components/nav/Header.tsx
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  components/
    nav/
      Header.tsx
    ui/
      navigation-menu.tsx

================================================================
Files
================================================================

================
File: src/components/nav/Header.tsx
================
'use client'

import { useState, useRef, useEffect } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { ChevronUp } from 'lucide-react'
import {
    NavigationMenu,
    NavigationMenuItem,
    NavigationMenuLink,
    NavigationMenuList,
    NavigationMenuTrigger,
    NavigationMenuContent
} from '@/components/ui/navigation-menu'
import { cn } from '@/lib/utils'
import { navLinks } from '@/utils/routes'
import Logo from '../Logo'
import CallToAction from '../CallToAction'

interface HamburgerProps {
    isOpen: boolean
    toggleMenu: () => void
}

const HamburgerMenu = ({ isOpen, toggleMenu }: HamburgerProps) => {
    return (
        <button
            className="group lg:hidden flex flex-col justify-center items-center w-10 h-10 space-y-1.5 focus:outline-none rounded-full transition-all duration-300 ease-in-out hover:bg-gray-100 hover:shadow-md hover:scale-105"
            onClick={e => {
                e.stopPropagation()
                toggleMenu()
            }}
            aria-label={isOpen ? 'Close menu' : 'Open menu'}
            aria-expanded={isOpen}
        >
            <span
                className={cn(
                    'block w-6 h-0.5 transition-all duration-300',
                    isOpen
                        ? 'translate-y-2 rotate-45 bg-[var(--primary)]'
                        : 'bg-black group-hover:bg-[var(--primary)]'
                )}
            />
            <span
                className={cn(
                    'block w-6 h-0.5 transition-all duration-300',
                    isOpen
                        ? 'opacity-0 bg-[var(--primary)]'
                        : 'bg-black group-hover:bg-[var(--primary)]'
                )}
            />
            <span
                className={cn(
                    'block w-6 h-0.5 transition-all duration-300',
                    isOpen
                        ? '-translate-y-2 -rotate-45 bg-[var(--primary)]'
                        : 'bg-black group-hover:bg-[var(--primary)]'
                )}
            />
        </button>
    )
}

export function Header() {
    const pathname = usePathname()
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState<boolean>(false)
    const [isServicesOpen, setIsServicesOpen] = useState<boolean>(false)

    // Refs for the navigation elements
    const headerRef = useRef<HTMLElement>(null)
    const navRef = useRef<HTMLDivElement>(null)

    // Toggle mobile menu - fixed to be a parameterless function
    const toggleMobileMenu = () => {
        setIsMobileMenuOpen(prevState => !prevState)
    }

    // Handle clicks outside of the entire navigation
    useEffect(() => {
        function handleClickOutside(event: MouseEvent) {
            // Only process if menu is open
            if (!isMobileMenuOpen) return

            // Check if click is outside the entire header
            if (
                headerRef.current &&
                !headerRef.current.contains(event.target as Node)
            ) {
                setIsMobileMenuOpen(false)
            }
        }

        // Add event listener
        document.addEventListener('mousedown', handleClickOutside)

        // Cleanup
        return () => {
            document.removeEventListener('mousedown', handleClickOutside)
        }
    }, [isMobileMenuOpen])

    return (
        <header
            ref={headerRef}
            className="fixed top-0 left-0 right-0 w-full bg-white-muted z-50 border-b border-b-gray-300"
        >
            <div className="max-w-[var(--max-width)] mx-auto px-6 py-4 flex items-center justify-between">
                <Link href="/">
                    <Logo invert={false} />
                </Link>

                {/* --- DESKTOP --- */}
                <nav className="hidden lg:block">
                    <NavigationMenu>
                        <NavigationMenuList className="space-x-6">
                            {navLinks.map(link => {
                                const isActive = pathname === link.route
                                const hasSubs =
                                    link.subLinks && link.subLinks.length > 0

                                if (hasSubs) {
                                    return (
                                        <NavigationMenuItem key={link.label}>
                                            <NavigationMenuTrigger
                                                className={cn(
                                                    'text-md text-black font-bold',
                                                    pathname.includes(
                                                        '/services/'
                                                    ) && 'text-primary'
                                                )}
                                            >
                                                {link.label}
                                            </NavigationMenuTrigger>
                                            <NavigationMenuContent>
                                                <ul className="grid w-[400px] gap-3 p-4">
                                                    {link.subLinks.map(sub => (
                                                        <li key={sub.label}>
                                                            <NavigationMenuLink
                                                                asChild
                                                            >
                                                                <Link
                                                                    href={
                                                                        sub.route
                                                                    }
                                                                    className={cn(
                                                                        'block p-3 rounded-md hover:text-primary duration-300 ease-in-out nav-link w-fit',
                                                                        pathname ===
                                                                            sub.route
                                                                            ? 'text-primary'
                                                                            : ''
                                                                    )}
                                                                >
                                                                    <div className="text-md font-medium mb-1">
                                                                        {
                                                                            sub.label
                                                                        }
                                                                    </div>
                                                                </Link>
                                                            </NavigationMenuLink>
                                                        </li>
                                                    ))}
                                                </ul>
                                            </NavigationMenuContent>
                                        </NavigationMenuItem>
                                    )
                                }

                                return (
                                    <NavigationMenuItem key={link.label}>
                                        <Link href={link.route} passHref>
                                            <NavigationMenuLink
                                                className={cn(
                                                    'nav-link',
                                                    isActive && 'active'
                                                )}
                                            >
                                                {link.label}
                                            </NavigationMenuLink>
                                        </Link>
                                    </NavigationMenuItem>
                                )
                            })}
                            <CallToAction buttonLabel="Get In Touch" />
                        </NavigationMenuList>
                    </NavigationMenu>
                </nav>

                {/* Hamburger Menu Button */}
                <HamburgerMenu
                    isOpen={isMobileMenuOpen}
                    toggleMenu={toggleMobileMenu}
                />

                {/* --- MOBILE MENU --- */}
                <div
                    ref={navRef}
                    className={cn(
                        'fixed inset-x-0 top-[4rem] bg-primary-fore border-b border-b-gray-300 lg:hidden',
                        'transition-[transform,opacity] duration-300 ease-in-out',
                        isMobileMenuOpen
                            ? 'translate-y-0 opacity-100 pointer-events-auto'
                            : '-translate-y-full opacity-0 pointer-events-none'
                    )}
                >
                    <nav className="max-w-[var(--max-width)] mx-auto px-6 py-4 bg-white shadow-md">
                        <ul className="space-y-4">
                            {navLinks.map(link => {
                                const isActive = pathname === link.route
                                const hasSubs =
                                    link.subLinks && link.subLinks.length > 0

                                return (
                                    <li key={link.label}>
                                        {hasSubs ? (
                                            <div>
                                                <button
                                                    className="flex items-center justify-between w-fit text-md rounded-md font-bold"
                                                    onClick={e => {
                                                        // Prevent any bubbling that might close the menu
                                                        e.stopPropagation()
                                                        setIsServicesOpen(
                                                            !isServicesOpen
                                                        )
                                                    }}
                                                >
                                                    {link.label}
                                                    <ChevronUp
                                                        className={cn(
                                                            'h-4 w-4 transition-transform duration-200',
                                                            isServicesOpen &&
                                                                'rotate-180'
                                                        )}
                                                    />
                                                </button>
                                                <div
                                                    className={cn(
                                                        'grid transition-[grid-template-rows,opacity] duration-200 ease-in-out',
                                                        isServicesOpen
                                                            ? 'grid-rows-[1fr] opacity-100'
                                                            : 'grid-rows-[0fr] opacity-0'
                                                    )}
                                                >
                                                    <div className="overflow-hidden">
                                                        <ul className="pl-4 py-2 space-y-4 mt-2">
                                                            {link.subLinks.map(
                                                                sub => (
                                                                    <li
                                                                        key={
                                                                            sub.label
                                                                        }
                                                                    >
                                                                        <Link
                                                                            className={cn(
                                                                                'nav-link',
                                                                                pathname ===
                                                                                    sub.route
                                                                                    ? 'text-primary'
                                                                                    : ''
                                                                            )}
                                                                            href={
                                                                                sub.route
                                                                            }
                                                                            onClick={e => {
                                                                                e.stopPropagation()
                                                                            }}
                                                                        >
                                                                            {
                                                                                sub.label
                                                                            }
                                                                        </Link>
                                                                    </li>
                                                                )
                                                            )}
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        ) : (
                                            <Link
                                                href={link.route}
                                                className={cn(
                                                    'nav-link',
                                                    isActive && 'active'
                                                )}
                                                onClick={e => {
                                                    // Don't close menu on navigation link clicks
                                                    e.stopPropagation()
                                                }}
                                            >
                                                {link.label}
                                            </Link>
                                        )}
                                    </li>
                                )
                            })}
                            <li>
                                <div onClick={e => e.stopPropagation()}>
                                    <CallToAction buttonLabel="Get In Touch" />
                                </div>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </header>
    )
}

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from 'react'
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu'
import { cva } from 'class-variance-authority'
import { ChevronDown } from 'lucide-react'

import { cn } from '@/lib/utils'

const NavigationMenu = React.forwardRef<
    React.ElementRef<typeof NavigationMenuPrimitive.Root>,
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
    <NavigationMenuPrimitive.Root
        ref={ref}
        className={cn(
            'relative z-10 flex max-w-max flex-1 items-center justify-center',
            className
        )}
        {...props}
    >
        {children}
        <NavigationMenuViewport />
    </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
    React.ElementRef<typeof NavigationMenuPrimitive.List>,
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
    <NavigationMenuPrimitive.List
        ref={ref}
        className={cn(
            'group flex flex-1 list-none items-center justify-center space-x-1',
            className
        )}
        {...props}
    />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
    'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:text-primary focus:outline-none disabled:pointer-events-none disabled:opacity-50'
)

const NavigationMenuTrigger = React.forwardRef<
    React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
    <NavigationMenuPrimitive.Trigger
        ref={ref}
        className={cn(navigationMenuTriggerStyle(), 'group', className)}
        {...props}
    >
        {children}{' '}
        <ChevronDown
            className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
            aria-hidden="true"
        />
    </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
    React.ElementRef<typeof NavigationMenuPrimitive.Content>,
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
    <NavigationMenuPrimitive.Content
        ref={ref}
        className={cn(
            'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',
            className
        )}
        {...props}
    />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
    React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
    <div className={cn('absolute left-0 top-full flex justify-center')}>
        <NavigationMenuPrimitive.Viewport
            className={cn(
                'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border border-gray-300  bg-white shadow-lg text-black data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)] ease-in-out',
                className
            )}
            ref={ref}
            {...props}
        />
    </div>
))
NavigationMenuViewport.displayName =
    NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
    React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
    <NavigationMenuPrimitive.Indicator
        ref={ref}
        className={cn(
            'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',
            className
        )}
        {...props}
    >
        <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
    </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
    NavigationMenuPrimitive.Indicator.displayName

export {
    navigationMenuTriggerStyle,
    NavigationMenu,
    NavigationMenuList,
    NavigationMenuItem,
    NavigationMenuContent,
    NavigationMenuTrigger,
    NavigationMenuLink,
    NavigationMenuIndicator,
    NavigationMenuViewport
}



================================================================
End of Codebase
================================================================
