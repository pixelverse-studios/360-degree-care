This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-22T21:07:30.426Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  app/
    about/
      page.tsx
    faq/
      page.tsx
    services/
      page.tsx
    testimonials/
      page.tsx
    layout.tsx
    page.tsx
  components/
    nav/
      Hamburger.tsx
      Header.tsx
    ui/
      button.tsx
      navigation-menu.tsx
    Footer.tsx
    Logo.tsx
  lib/
    utils.ts
  styles/
    globals.css
    reset.css
  utils/
    routes.ts
.gitignore
.prettierrc
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: src/app/about/page.tsx
================
export default function AboutPage() {
    return <main>About Page</main>
}

================
File: src/app/faq/page.tsx
================
export default function FAQPage() {
    return <main>FAQ Page</main>
}

================
File: src/app/services/page.tsx
================
export default function ServicesPage() {
    return <main>Services Page</main>
}

================
File: src/app/testimonials/page.tsx
================
export default function TestimonialsPage() {
    return <main>Testimonials Page</main>
}

================
File: src/app/layout.tsx
================
import type { Metadata } from 'next'
// import localFont from "next/font/local";
import { Header } from '@/components/nav/Header'
import Footer from '@/components/Footer'
import '../styles/globals.css'

export const metadata: Metadata = {
    title: '360Â° Care',
    description: 'Created and maintained by PixelVerse Studios'
}

export default function RootLayout({
    children
}: Readonly<{
    children: React.ReactNode
}>) {
    return (
        <html lang="en">
            <body className={`antialiased`}>
                <Header />
                {children}
                <Footer />
            </body>
        </html>
    )
}

================
File: src/app/page.tsx
================
export default function HomePage() {
    return <main>Home Page</main>
}

================
File: src/components/nav/Hamburger.tsx
================
interface HamburgerProps {
    isOpen: boolean
    setIsOpen: (isOpen: boolean) => void
}

export default function HamburgerMenu({ isOpen, setIsOpen }: HamburgerProps) {
    return (
        <button
            onClick={() => setIsOpen(!isOpen)}
            className="group relative w-10 h-10 flex flex-col items-center justify-center p-2 rounded-lg bg-background text-white shadow-md border border-primary lg:hidden transition-colors duration-300 hover:bg-primary hover:text-background hover:border-background"
        >
            <span
                className={`absolute block w-6 h-0.5 bg-primary rounded transition-transform duration-300 group-hover:bg-background ${
                    isOpen ? 'rotate-45' : '-translate-y-2'
                }`}
            ></span>
            <span
                className={`absolute block w-6 h-0.5 bg-primary rounded transition-opacity duration-200 group-hover:bg-background ${
                    isOpen ? 'opacity-0' : ''
                }`}
            ></span>
            <span
                className={`absolute block w-6 h-0.5 bg-primary rounded transition-transform duration-300 group-hover:bg-background ${
                    isOpen ? '-rotate-45' : 'translate-y-2'
                }`}
            ></span>
        </button>
    )
}

================
File: src/components/nav/Header.tsx
================
'use client'

import { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import {
    NavigationMenu,
    NavigationMenuItem,
    NavigationMenuLink,
    NavigationMenuList
} from '@/components/ui/navigation-menu'
import { Button } from '../ui/button'
import { cn } from '@/lib/utils'
import { navLinks } from '@/utils/routes'
import HamburgerMenu from './Hamburger'
import Logo from '../Logo'

export function Header() {
    const pathname = usePathname()

    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState<boolean>(false)

    return (
        <header className="fixed top-0 left-0 right-0 w-full bg-foreground z-50 border-b border-b-gray-300">
            <div className="max-w-[var(--max-width)] mx-auto px-6 py-4 flex items-center justify-between">
                <Link href="/">
                    <Logo />
                </Link>

                {/* --- DESKTOP --- */}
                <nav className="hidden lg:block">
                    <NavigationMenu>
                        <NavigationMenuList className="space-x-6">
                            {navLinks.map(link => {
                                const isActive = pathname === link.route

                                return (
                                    <NavigationMenuItem key={link.label}>
                                        <Link
                                            href={link.route}
                                            legacyBehavior
                                            passHref
                                        >
                                            <NavigationMenuLink
                                                className={cn(
                                                    'nav-link',
                                                    isActive && 'active'
                                                )}
                                            >
                                                {link.label}
                                            </NavigationMenuLink>
                                        </Link>
                                    </NavigationMenuItem>
                                )
                            })}
                            <Button variant="cta" className="rounded-3xl">
                                Call To Action
                            </Button>
                        </NavigationMenuList>
                    </NavigationMenu>
                </nav>

                <HamburgerMenu
                    isOpen={isMobileMenuOpen}
                    setIsOpen={setIsMobileMenuOpen}
                />
                {/* --- MOBILE --- */}
                <div
                    className={cn(
                        'fixed inset-x-0 top-[65px] bg-[hsl(var(--nav))] border-b border-b-gray-300 lg:hidden',
                        'transition-[transform,opacity] duration-300 ease-in-out',
                        isMobileMenuOpen
                            ? 'translate-y-0 opacity-100 pointer-events-auto'
                            : '-translate-y-full opacity-0 pointer-events-none'
                    )}
                >
                    <nav className="max-w-[var(--max-width)] mx-auto px-6 py-4 bg-foreground">
                        <ul className="space-y-4">
                            {navLinks.map(link => {
                                const isActive = pathname === link.route

                                return (
                                    <li key={link.label}>
                                        <Link
                                            href={link.route}
                                            className={cn(
                                                'nav-link',
                                                isActive && 'active'
                                            )}
                                            onClick={() =>
                                                setIsMobileMenuOpen(false)
                                            }
                                        >
                                            {link.label}
                                        </Link>
                                    </li>
                                )
                            })}
                            <Button variant="cta" className="rounded-3xl">
                                Call To Action
                            </Button>
                        </ul>
                    </nav>
                </div>
            </div>
        </header>
    )
}

================
File: src/components/ui/button.tsx
================
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const buttonVariants = cva(
    'inline-flex items-center justify-center rounded-md text-sm font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',
    {
        variants: {
            variant: {
                default:
                    'bg-primary text-primary-foreground shadow hover:bg-primary/90',
                destructive:
                    'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
                outline:
                    'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
                secondary:
                    'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
                ghost: 'button-ghost border border-[var(--ghost-bg)]',
                link: 'text-primary underline-offset-4 hover:underline',
                cta: 'px-6 py-3 border-2 font-bold transition-all duration-200 bg-secondary text-secondary-foreground border-secondary hover:bg-secondary-foreground hover:text-secondary'
            },
            size: {
                default: 'h-9 px-4 py-2',
                sm: 'h-8 rounded-md px-3 text-xs',
                lg: 'h-10 rounded-md px-8',
                icon: 'h-9 w-9'
            }
        },
        defaultVariants: {
            variant: 'default',
            size: 'default'
        }
    }
)

export interface ButtonProps
    extends React.ButtonHTMLAttributes<HTMLButtonElement>,
        VariantProps<typeof buttonVariants> {
    asChild?: boolean
    ghostBg?: string
    ghostText?: string
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    (
        {
            className,
            variant,
            size,
            asChild = false,
            ghostBg,
            ghostText,
            ...props
        },
        ref
    ) => {
        const Comp = asChild ? Slot : 'button'

        const style: React.CSSProperties =
            variant === 'ghost' && ghostBg && ghostText
                ? {
                      ['--ghost-bg' as any]: ghostBg,
                      ['--ghost-text' as any]: ghostText
                  }
                : {}

        return (
            <Comp
                className={cn(buttonVariants({ variant, size, className }))}
                ref={ref}
                style={style}
                {...props}
            />
        )
    }
)
Button.displayName = 'Button'

export { Button, buttonVariants }

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: src/components/Footer.tsx
================
'use client'

import Link from 'next/link'
import { FaFacebookF, FaYoutube, FaLinkedinIn } from 'react-icons/fa6'
import { Button } from '@/components/ui/button'
import Logo from '@/components/Logo'
import { navLinks, footerResources } from '@/utils/routes'

const [serviceLink, aboutLink, faqLink, testimonialLink] = navLinks

export default function Footer() {
    const currentYear = new Date().getFullYear()
    return (
        <footer className="bg-foreground border-t border-gray-300 py-10 text-black">
            <div className="max-w-[1400px] mx-auto px-6">
                {/* Top Section */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                    {/* Left - Logo & CTA */}
                    <div>
                        <Logo />
                        <p className="mt-2 text-sm text-gray-600">
                            First in Home Careâ¢
                        </p>
                        <div className="mt-4">
                            <Button variant="cta" className="w-full md:w-auto">
                                Find a Location
                            </Button>
                        </div>
                        <div className="mt-2">
                            <Button
                                variant="ghost"
                                ghostBg="hsl(var(--primary))"
                                className="w-full md:w-auto"
                            >
                                Careers
                            </Button>
                        </div>
                    </div>

                    {/* Middle - Links */}
                    <div className="flex flex-col space-y-2 text-sm">
                        <p className="font-bold text-lg">See More</p>
                        <Link
                            href={serviceLink.route}
                            className="hover:text-primary"
                        >
                            {serviceLink.label}
                        </Link>
                        <Link
                            href={aboutLink.route}
                            className="hover:text-primary"
                        >
                            {aboutLink.label}
                        </Link>
                        <p className="font-bold text-lg pt-3">Resources</p>
                        <Link
                            href={faqLink.route}
                            className="hover:text-primary"
                        >
                            {faqLink.label}
                        </Link>
                        <Link
                            href={testimonialLink.route}
                            className="hover:text-primary"
                        >
                            {testimonialLink.label}
                        </Link>
                    </div>

                    {/* Right - Contact & Socials */}
                    <div className="text-sm">
                        <p className="font-bold text-lg">Contact</p>
                        <p className="mt-2">
                            27 Chestnut Street <br />
                            Floor 1 <br />
                            Ridgewood, NJ 07450
                        </p>
                        <p className="mt-1">
                            <a
                                href="tel:8003387786"
                                className="text-primary hover:underline"
                            >
                                (800) 338-7786
                            </a>
                        </p>

                        {/* Social Icons */}
                        <div className="flex space-x-4 mt-4">
                            <a
                                href="#"
                                className="text-gray-700 hover:text-primary"
                            >
                                <FaFacebookF size={24} />
                            </a>
                            <a
                                href="#"
                                className="text-gray-700 hover:text-primary"
                            >
                                <FaLinkedinIn size={24} />
                            </a>
                            <a
                                href="#"
                                className="text-gray-700 hover:text-primary"
                            >
                                <FaYoutube size={24} />
                            </a>
                        </div>
                    </div>
                </div>

                {/* Bottom Section */}
                <div className="mt-10 border-t border-gray-200 pt-4 text-center text-xs text-gray-600">
                    <p>
                        360 Degree Care is an Equal Opportunity Employer. Each
                        franchise is independently owned and operated.
                    </p>
                    <p className="mt-1">
                        &copy; {currentYear} 360 Degree Care Inc. All rights
                        reserved.
                    </p>

                    {/* Legal Links */}
                    <div className="mt-2 flex flex-wrap justify-center space-x-3">
                        {footerResources.map((resource, key) => (
                            <>
                                <Link
                                    key={resource.label}
                                    href={resource.route}
                                    className="hover:underline"
                                >
                                    {resource.label}
                                </Link>
                                {key + 1 !== footerResources.length ? (
                                    <span key={key}>|</span>
                                ) : null}
                            </>
                        ))}
                    </div>
                </div>
            </div>
        </footer>
    )
}

================
File: src/components/Logo.tsx
================
import { FaRegCircle } from 'react-icons/fa6'

const Logo = () => {
    return (
        <div className="flex content-center gap-2 text-4xl text-primary font-bold cursor-pointer">
            <p className="flex content-center">
                360
                <FaRegCircle className="h-2 w-2 my-[5px]" />
            </p>
            <p>CARE</p>
        </div>
    )
}

export default Logo

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/styles/globals.css
================
@import './reset.css';

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    /* #171717 */
    --primary: 18, 100%, 59%; /* #ff6c2f */
    --secondary: 18, 100%, 59%; /* #ff6c2f */
    --white: 0, 0%, 94%; /* #f0f0f0 */
    --black: 0, 0%, 11%; /* #1c1c1c */
    --muted-black: 0, 0%, 20%; /* #333333 */

    --foreground: 0, 6%, 90%; /*#e6e3e3  */

    --ghost-bg: transparent;
    --ghost-text: black;

    --border-radius: 8px;
    --max-width: 1400px;
}

/* 
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
} */

html,
body {
    height: 100%;
    display: flex;
    flex-direction: column;
}

body {
    min-height: 100vh;
    color: hsl(var(--black));
    /* font-family: Arial, Helvetica, sans-serif; */
}

main {
    margin-top: 4.5rem;
    flex: 1;
}

.button-ghost {
    background-color: var(--ghost-bg);
    color: var(--ghost-text);
    border: 2px solid var(--ghost-bg);
    transition: all 0.2s ease-in-out;
}

.button-ghost:hover {
    background-color: var(--ghost-text);
    color: var(--ghost-bg);
    border-color: var(--ghost-text);
}

@layer base {
    * {
        @apply border-border outline-ring/50;
    }
    body {
        @apply bg-background text-foreground;
    }

    .nav-link {
        @apply text-[16px] text-primary font-bold transition-colors;
    }
    .nav-link:hover {
        @apply hovered-nav-link; /* => color: hsl(var(--secondary)); */
    }
    .nav-link.active {
        /* text color and border using your secondary color */
        @apply selected-nav-link border-b-2 border-secondary;
    }
}

@layer utilities {
    .text-balance {
        text-wrap: balance;
    }

    .selected-nav-link {
        color: hsl(var(--primary));
    }
    .hovered-nav-link {
        color: hsl(var(--primary));
    }
}

@layer components {
    .nav-link {
        @apply relative text-[16px] text-muted transition-colors;
    }

    .nav-link::after {
        content: '';
        position: absolute;
        left: 50%;
        bottom: -2px;
        width: 0;
        height: 2px;
        background-color: hsl(var(--secondary));
        transition:
            width 0.3s ease,
            left 0.3s ease;
    }

    .nav-link:hover::after,
    .nav-link.active::after {
        width: 100%;
        left: 0;
    }

    .nav-link.active {
        @apply font-bold text-secondary;
    }
}

================
File: src/styles/reset.css
================
/* Box sizing rules */
*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
figure,
blockquote,
dl,
dd {
    margin: 0;
}

/* Remove list styles on ul, ol elements */
ul,
ol {
    list-style: none;
}

/* Set core root defaults */
html:focus-within {
    scroll-behavior: smooth;
}

/* Set core body defaults */
body {
    min-height: 100vh;
    text-rendering: optimizeSpeed;
    line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
    text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
    max-width: 100%;
    display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
    font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
    html:focus-within {
        scroll-behavior: auto;
    }

    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}

================
File: src/utils/routes.ts
================
export const navLinks = [
    {
        route: '/services',
        label: 'Services',
        subLinks: [] // ADD SERVICE SUB LINKS IN PHASE 3
    },
    {
        route: '/about',
        label: 'About Us',
        subLinks: []
    },
    {
        route: '/faq',
        label: 'FAQs',
        subLinks: []
    },
    {
        route: '/testimonials',
        label: 'Testimonials',
        subLinks: []
    }
]

export const footerResources = [
    {
        route: '/privacy-policy',
        label: 'Privacy Policy'
    },
    {
        route: '/legal-disclaimer',
        label: 'Legal Disclaimer'
    },
    {
        route: '/nondiscimination',
        label: 'Nondiscrimination & Accessibility'
    }
]

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .prettierrc
================
{
    "tabWidth": 4,
    "semi": false,
    "singleQuote": true,
    "trailingComma": "none",
    "bracketSpacing": true,
    "arrowParens": "avoid",
    "requirePragma": false,
    "insertPragma": false,
    "proseWrap": "never"
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
    "name": "my-app",
    "version": "0.1.0",
    "private": true,
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    },
    "dependencies": {
        "@radix-ui/react-checkbox": "^1.1.4",
        "@radix-ui/react-dialog": "^1.1.6",
        "@radix-ui/react-label": "^2.1.2",
        "@radix-ui/react-navigation-menu": "^1.2.5",
        "@radix-ui/react-select": "^2.1.6",
        "@radix-ui/react-slot": "^1.1.2",
        "class-variance-authority": "^0.7.1",
        "clsx": "^2.1.1",
        "lucide-react": "^0.475.0",
        "next": "14.2.23",
        "react": "^18",
        "react-dom": "^18",
        "react-icons": "^5.5.0",
        "tailwind-merge": "^3.0.1",
        "tailwindcss-animate": "^1.0.7"
    },
    "devDependencies": {
        "@types/node": "^20",
        "@types/react": "^18",
        "@types/react-dom": "^18",
        "autoprefixer": "^10.4.20",
        "eslint": "^8",
        "eslint-config-next": "14.2.23",
        "eslint-config-prettier": "^10.0.1",
        "eslint-plugin-import": "^2.31.0",
        "eslint-plugin-prettier": "^5.2.3",
        "eslint-plugin-react": "^7.37.4",
        "eslint-plugin-react-hooks": "^5.1.0",
        "postcss": "^8.5.2",
        "prettier": "^3.5.0",
        "tailwindcss": "^3.4.17",
        "typescript": "^5"
    }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from 'tailwindcss'

const config: Config = {
    darkMode: ['class'],
    content: [
        './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
        './src/components/**/*.{js,ts,jsx,tsx,mdx}',
        './src/app/**/*.{js,ts,jsx,tsx,mdx}'
    ],
    theme: {
        extend: {
            maxWidth: {
                custom: 'var(--max-width)'
            },
            colors: {
                background: 'hsl(var(--white))',
                foreground: 'hsl(var(--foreground))',
                primary: {
                    DEFAULT: 'hsl(var(--primary))',
                    foreground: 'hsl(var(--primary-foreground))'
                },
                card: {
                    DEFAULT: 'hsl(var(--card))',
                    foreground: 'hsl(var(--card-foreground))'
                },
                popover: {
                    DEFAULT: 'hsl(var(--popover))',
                    foreground: 'hsl(var(--popover-foreground))'
                },
                secondary: {
                    DEFAULT: 'hsl(var(--secondary))',
                    foreground: 'hsl(var(--white))'
                },
                muted: {
                    DEFAULT: 'hsl(var(--muted-black))',
                    foreground: 'hsl(var(--muted-foreground))'
                },
                accent: {
                    DEFAULT: 'hsl(var(--accent))',
                    foreground: 'hsl(var(--accent-foreground))'
                },
                destructive: {
                    DEFAULT: 'hsl(var(--destructive))',
                    foreground: 'hsl(var(--destructive-foreground))'
                },
                border: 'hsl(var(--border))',
                input: 'hsl(var(--input))',
                ring: 'hsl(var(--ring))',
                chart: {
                    '1': 'hsl(var(--chart-1))',
                    '2': 'hsl(var(--chart-2))',
                    '3': 'hsl(var(--chart-3))',
                    '4': 'hsl(var(--chart-4))',
                    '5': 'hsl(var(--chart-5))'
                }
            },
            borderRadius: {
                lg: 'var(--border-radius)',
                md: 'calc(var(--border-radius) - 2px)',
                sm: 'calc(var(--border-radius) - 4px)'
            }
        }
    },
    plugins: [require('tailwindcss-animate')]
}
export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
