This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/components/nav/Breadcrumbs.tsx, src/utils/routes.ts
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  components/
    nav/
      Breadcrumbs.tsx
  utils/
    routes.ts

================================================================
Files
================================================================

================
File: src/components/nav/Breadcrumbs.tsx
================
'use client'

import { Fragment } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { cn } from '@/lib/utils'
import { availablePages } from '@/utils/routes'
import {
    Breadcrumb,
    BreadcrumbItem,
    BreadcrumbLink,
    BreadcrumbList,
    BreadcrumbSeparator
} from '@/components/ui/breadcrumb'

export default function Breadcrumbs() {
    const pathname = usePathname()
    const pathSegments = pathname.split('/').filter(Boolean)

    const breadcrumbs = pathSegments.map((segment, index) => {
        const routePath = '/' + pathSegments.slice(0, index + 1).join('/')
        const matchedNav = availablePages.find(
            nav =>
                nav.route === routePath ||
                nav.subLinks.some(sub => sub.route === routePath)
        )

        const label =
            matchedNav?.subLinks.find(sub => sub.route === routePath)?.label ||
            matchedNav?.label ||
            segment

        return {
            route: routePath,
            label: label.charAt(0).toUpperCase() + label.slice(1),
            canVisit: matchedNav?.canVisit,
            isValid: matchedNav === undefined
        }
    })

    if (pathname === '/') return <div className="mt-[4.8rem]" />

    return (
        <Breadcrumb className="mt-[5.5rem] max-w-custom w-full mx-auto px-6 py-4 bg-transparent">
            <BreadcrumbList>
                <BreadcrumbItem>
                    <BreadcrumbLink
                        asChild
                        className="text-black-muted font-bold hover:text-primary"
                    >
                        <Link href="/">Home</Link>
                    </BreadcrumbLink>
                </BreadcrumbItem>
                {breadcrumbs.map((crumb, index) => {
                    const isLast = index === breadcrumbs.length - 1
                    return (
                        <Fragment key={index}>
                            <BreadcrumbSeparator />
                            <BreadcrumbItem key={crumb.route}>
                                {index === breadcrumbs.length - 1 ||
                                !crumb.canVisit ? (
                                    <span
                                        className={cn(
                                            'text-primary font-semibold',
                                            isLast
                                                ? 'text-primary'
                                                : 'text-black-muted'
                                        )}
                                    >
                                        {crumb.isValid ? crumb.label : 404}
                                    </span>
                                ) : (
                                    <BreadcrumbLink
                                        asChild
                                        className={
                                            isLast
                                                ? 'text-primary'
                                                : 'text-black-muted'
                                        }
                                    >
                                        <Link href={crumb.route}>
                                            {crumb.isValid ? crumb.label : 404}
                                        </Link>
                                    </BreadcrumbLink>
                                )}
                            </BreadcrumbItem>
                        </Fragment>
                    )
                })}
            </BreadcrumbList>
        </Breadcrumb>
    )
}

================
File: src/utils/routes.ts
================
export const navLinks = [
    {
        route: '/about',
        label: 'About Us',
        subLinks: [],
        canVisit: true
    },
    {
        route: '',
        label: 'Services',
        canVisit: false,
        subLinks: [
            {
                route: '/services/personal-care',
                label: 'Personal Care',
                canVisit: true
            },
            {
                route: '/services/elder-care',
                label: 'Elder Care Consulting',
                canVisit: true
            },
            {
                route: '/services/staffing',
                label: 'Staffing',
                canVisit: true
            },
            {
                route: '/services/home-health-aides',
                label: 'Home Health Aides',
                canVisit: true
            },
            {
                route: '/services/nursing',
                label: 'Nursing Services',
                canVisit: true
            },
            {
                route: '/services/companions',
                label: 'Companions',
                canVisit: true
            }
        ]
    },
    {
        route: '/wisdom-vault',
        label: 'Wisdom Vault',
        canVisit: true,
        subLinks: []
    },
    {
        route: '/faq',
        label: 'FAQs',
        canVisit: true,
        subLinks: []
    }
]

export const footerResources = [
    {
        route: '/privacy-policy',
        label: 'Privacy Policy',
        canVisit: true,
        subLinks: []
    },
    {
        route: '/legal-disclaimer',
        label: 'Legal Disclaimer',
        canVisit: true,
        subLinks: []
    },
    {
        route: '/nondiscrimination',
        label: 'Nondiscrimination & Accessibility',
        canVisit: true,
        subLinks: []
    }
]

export const availablePages = [...navLinks, ...footerResources]



================================================================
End of Codebase
================================================================
